# template for the Intel fortran compiler
# typical use with mkmf
# mkmf -t template.ifc -c"-Duse_libMPI -Duse_netCDF" path_names /usr/local/include
##NETCDF = /opt/netcdf/3.6.2/Intel-9.1
NETCDF = $(NETCDF_ROOT)
CPPFLAGS = -DLARGE_FILE
#FFLAGS_BASE = -V -what -fno-alias -stack_temps -safe_cray_ptr -ftz -i_dynamic -assume byterecl -g -i4 -r8 -Wp,-w -convert big_endian -heap-arrays 5120
#FFLAGS_BASE = -fno-alias -safe_cray_ptr -ftz -i-dynamic -assume byterecl -g -i4 -r8 -Wp,-w -convert big_endian -heap-arrays 5120 -O0
FFLAGS_BASE = -V -what -fno-alias -stack_temps -safe_cray_ptr -ftz -i_dynamic -assume byterecl -g -i4 -r8 -Wp,-w
FFLAGS_REPRO = -fltconsistency
FFLAGS_DEBUG = -check -warn -warn noerrors -debug variable_locations -inline_debug_info -traceback
#FFLAGS = $(FFLAGS_BASE) -O2 -nowarn -fpp -I$(NETCDF)/include/Intel
FC = mpif90
CC = mpicc

CFLAGS = -V -O2 -w -D__IFC -I$(NETCDF)/include/Intel
LD = mpif90

# -save-temps to save a file after the work by the preprocessor.  
#
LDFLAGS        = -v -L$(NETCDF)/lib/Intel -lnetcdff -L$(NETCDF)/lib/Intel -lnetcdf -lmpi 
FFLAGS = $(FFLAGS_BASE) $(FFLAGS_REPRO) -O2 -no-vec -nowarn -fpp -save-temps -I$(NETCDF)/include/Intel

# Some higher optimisations that RASF applied to OFAM3....
# files which probably benefit from inlining:
#ocean_density.o  ocean_convect.o :FFLAGS +=  $(INLINE_FLAGS)
ocean_density.o  ocean_convect.o :FFLAGS +=  -O3
ocean_obc.o :FFLAGS += -O0
#ocean_bihgen_friction.o : FFLAGS += -O3 -fltconsistency -vec -vec-report3 -opt-report3 -opt-report-file=bhgf.txt   -opt-report-routine=bihgen_friction
ocean_bihgen_friction.o : FFLAGS += -O3
#ocean_bihgen_friction.o : FFLAGS += -O3

horiz_interp_type.o horiz_interp_conserve.o horiz_interp_bilinear.o \
horiz_interp_bicubic.o horiz_interp_spherical.o horiz_interp.o \
get_cal_time.o time_interp.o axis_utils.o time_interp_external.o \
ocean_parameters.o ocean_operators.o ocean_util.o ocean_workspace.o ocean_utils.o \
data_override.o ocean_barotropic.o ocean_sponges_tracer.o ocean_vert_tidal.o \
ocean_pressure.o tracer_manager.o ocean_tracer_advect.o : FFLAGS += -O3

#---------------------------------------------------------------------------
# you should never need to change any lines below.

# see the MIPSPro F90 manual for more details on some of the file extensions
# discussed here.
# this makefile template recognizes fortran sourcefiles with extensions
# .f, .f90, .F, .F90. Given a sourcefile <file>.<ext>, where <ext> is one of
# the above, this provides a number of default actions:

# make <file>.opt	create an optimization report
# make <file>.o		create an object file
# make <file>.s		create an assembly listing
# make <file>.x		create an executable file, assuming standalone
#			source
# make <file>.i		create a preprocessed file (for .F)
# make <file>.i90	create a preprocessed file (for .F90)

# The macro TMPFILES is provided to slate files like the above for removal.

RM = rm -f
SHELL = /bin/csh -f
TMPFILES = .*.m *.B *.L *.i *.i90 *.l *.s *.mod *.opt

.SUFFIXES: .F .F90 .H .L .T .f .f90 .h .i .i90 .l .o .s .opt .x

.f.L:
	$(FC) $(FFLAGS) -c -listing $*.f
.f.opt:
	$(FC) $(FFLAGS) -c -opt_report_level max -opt_report_phase all -opt_report_file $*.opt $*.f
.f.l:
	$(FC) $(FFLAGS) -c $(LIST) $*.f
.f.T:
	$(FC) $(FFLAGS) -c -cif $*.f
.f.o:
	$(FC) $(FFLAGS) -c $*.f
.f.s:
	$(FC) $(FFLAGS) -S $*.f
.f.x:
	$(FC) $(FFLAGS) -o $*.x $*.f *.o $(LDFLAGS)
.f90.L:
	$(FC) $(FFLAGS) -c -listing $*.f90
.f90.opt:
	$(FC) $(FFLAGS) -c -opt_report_level max -opt_report_phase all -opt_report_file $*.opt $*.f90
.f90.l:
	$(FC) $(FFLAGS) -c $(LIST) $*.f90
.f90.T:
	$(FC) $(FFLAGS) -c -cif $*.f90
.f90.o:
	$(FC) $(FFLAGS) -c $*.f90
.f90.s:
	$(FC) $(FFLAGS) -c -S $*.f90
.f90.x:
	$(FC) $(FFLAGS) -o $*.x $*.f90 *.o $(LDFLAGS)
.F.L:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c -listing $*.F
.F.opt:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c -opt_report_level max -opt_report_phase all -opt_report_file $*.opt $*.F
.F.l:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c $(LIST) $*.F
.F.T:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c -cif $*.F
.F.f:
	$(FC) $(CPPDEFS) $(CPPFLAGS) -EP $*.F > $*.f
.F.i:
	$(FC) $(CPPDEFS) $(CPPFLAGS) -P $*.F
.F.o:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c $*.F
.F.s:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c -S $*.F
.F.x:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -o $*.x $*.F *.o $(LDFLAGS)
.F90.L:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c -listing $*.F90
.F90.opt:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c -opt_report_level max -opt_report_phase all -opt_report_file $*.opt $*.F90
.F90.l:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c $(LIST) $*.F90
.F90.T:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c -cif $*.F90
.F90.f90:
	$(FC) $(CPPDEFS) $(CPPFLAGS) -EP $*.F90 > $*.f90
.F90.i90:
	$(FC) $(CPPDEFS) $(CPPFLAGS) -P $*.F90
.F90.o:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c $*.F90
.F90.s:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c -S $*.F90
.F90.x:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -o $*.x $*.F90 *.o $(LDFLAGS)
